---
//  imágenes de fondo
const backgroundImages = [
  {
    url: "https://taanab.mx/images/home/slide-0.webp",
    alt: "Casa moderna minimalista"
  },
  {
    url: "https://taanab.mx/images/home/slide-1.webp", 
    alt: "Villa costera contemporánea"
  },
  {
    url: "https://taanab.mx/images/home/slide-2.webp",
    alt: "Residencial con vista al lago"
  },
  {
    url: "https://taanab.mx/images/home/slide-3.webp",
    alt: "Hotel boutique en la selva"
  },
  {
    url: "https://taanab.mx/images/home/slide-4.webp",
    alt: "Oficinas corporativas modernas"
  },
  {
    url: "https://taanab.mx/images/home/slide-5.webp",
    alt: "Oficinas corporativas modernas"
  },
  {
    url: "https://taanab.mx/images/home/slide-6.webp",
    alt: "Oficinas corporativas modernas"
  },
];
---

<section class="relative w-full h-screen overflow-hidden">
  <!-- Slider de imágenes de fondo  -->
  <div class="fixed inset-0 w-full h-full -z-10">
    {backgroundImages.map((image, index) => (
      <div 
        class={`absolute inset-0 w-full h-full transition-opacity duration-1000 ease-in-out ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-bg={image.url}
        data-index={index}
      >
        <img 
          src={image.url} 
          alt={image.alt} 
          loading={index === 0 ? 'eager' : 'lazy'}
          class="w-full h-full object-cover"
        />
      </div>
    ))}
    <div class="absolute inset-0 bg-black/40"></div>
  </div>

  <!-- Controles del slider -->
  <div class="absolute top-1/2 left-8 transform -translate-y-1/2 z-30">
   
  </div>
  
  <div class="absolute top-1/2 right-8 transform -translate-y-1/2 z-30">
    
  </div>

  <!-- Indicadores - OCULTOS pero funcionales para el auto-slide -->
  <div class="hidden">
    {backgroundImages.map((_, index) => (
      <button 
        class={`w-3 h-3 rounded-full border-2 border-white/60 transition-all duration-300 ${index === 0 ? 'bg-white' : 'bg-transparent hover:bg-white/50'}`}
        data-index={index}
        aria-label={`Ir a imagen ${index + 1}`}
      ></button>
    ))}
  </div>

  <!-- Contenido del Inicio -->
  <div class="relative flex items-center justify-center z-20 p-8 h-screen pt-24">
    <div class="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-12 gap-8 items-center w-full">
      <div class="lg:col-span-12 text-center lg:text-left">
        <h1 class="text-5xl sm:text-6xl lg:text-7xl font-light text-white mb-6 leading-tight">
          
        
      </div>
    </div>
  </div>

  <!-- Guadalajara en inferior izquierda -->
  <div class="absolute bottom-8 left-12 z-30 opacity-0 translate-y-8 animate-fade-in-up" style="animation-delay: 1.2s;">
    <div class="location-item">
      <h2 class="text-white font-semibold text-3xl tracking-[2px] mb-2 drop-shadow-[0_6px_12px_rgba(0,0,0,0.9)] hover:scale-105 transition-transform duration-300 hover:drop-shadow-[0_10px_20px_rgba(0,0,0,0.95)]" style="text-shadow: 3px 3px 6px rgba(0,0,0,0.9);">GUADALAJARA</h2>
      <div class="flex gap-1">
      
      </div>
    </div>
  </div>

  <!-- Playa del Carmen en inferior derecha -->
  <div class="absolute bottom-8 right-8 z-30 opacity-0 translate-y-8 animate-fade-in-up" style="animation-delay: 1.4s;">
    <div class="location-item text-right">
      <h2 class="text-white font-semibold text-3xl tracking-[2px] mb-2 drop-shadow-[0_6px_12px_rgba(0,0,0,0.9)] hover:scale-105 transition-transform duration-300 hover:drop-shadow-[0_10px_20px_rgba(0,0,0,0.95)]" style="text-shadow: 3px 3px 6px rgba(0,0,0,0.9);">PLAYA DEL CARMEN</h2>
      <div class="flex justify-end gap-1">
       
      </div>
    </div>
  </div>

  <!-- Elemento del 10-->
  <div class="absolute bottom-0 left-1/2 ml-16 transform -translate-x-1/2 z-[100]"> 
    <picture>
      
      <img src="https://taanab.mx/images/home/textwhite.svg" alt="Logo" class="h-60 w-auto">
    </picture>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const slides = document.querySelectorAll('[data-bg]'); // Solo seleccionar slides con imágenes
    const indicatorButtons = document.querySelectorAll('.hidden button'); // Cambiar selector para botones ocultos
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    let currentSlide = 0;
    let isTransitioning = false;
    let autoSlideInterval: ReturnType<typeof setInterval>;
    
    // Función para cambiar slide mejorada
    function goToSlide(index: number) {
      if (isTransitioning) return;
      
      // Validar índice
      if (index < 0) index = slides.length - 1;
      if (index >= slides.length) index = 0;
      
      if (index === currentSlide) return;
      
      isTransitioning = true;
      
      // Remover clase active del slide actual
      slides[currentSlide].classList.remove('opacity-100');
      slides[currentSlide].classList.add('opacity-0');
      
      // Actualizar indicador actual (solo si existe)
      if (indicatorButtons[currentSlide]) {
        indicatorButtons[currentSlide].classList.remove('bg-white');
        indicatorButtons[currentSlide].classList.add('bg-transparent');
      }
      
      // Cambiar al nuevo slide
      currentSlide = index;
      
      // Agregar clase active al nuevo slide
      slides[currentSlide].classList.remove('opacity-0');
      slides[currentSlide].classList.add('opacity-100');
      
      // Actualizar indicador activo (solo si existe)
      if (indicatorButtons[currentSlide]) {
        indicatorButtons[currentSlide].classList.remove('bg-transparent');
        indicatorButtons[currentSlide].classList.add('bg-white');
      }
      
      // Permitir nueva transición después de la animación
      setTimeout(() => {
        isTransitioning = false;
      }, 1000);
    }
    
    // Función para ir al siguiente slide con reinicio automático
    function nextSlide() {
      const next = (currentSlide + 1) % slides.length; // Usar módulo para reinicio automático
      goToSlide(next);
    }
    
    // Función para ir al slide anterior con reinicio automático  
    function prevSlide() {
      const prev = currentSlide === 0 ? slides.length - 1 : currentSlide - 1;
      goToSlide(prev);
    }
    
    // Auto-slider con reinicio automático mejorado
    function startAutoSlide() {
      stopAutoSlide(); // Limpiar cualquier interval existente
      autoSlideInterval = setInterval(() => {
        nextSlide();
      }, 4000); // Cambia cada 4 segundos
    }
    
    function stopAutoSlide() {
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
      }
    }
    
    // Event listeners
    prevBtn?.addEventListener('click', () => {
      prevSlide();
      stopAutoSlide();
      startAutoSlide(); // Reiniciar auto-slide
    });
    
    nextBtn?.addEventListener('click', () => {
      nextSlide();
      stopAutoSlide();
      startAutoSlide(); // Reiniciar auto-slide
    });
    
    // Indicadores - usar la variable ya declarada
    indicatorButtons.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        goToSlide(index);
        stopAutoSlide();
        startAutoSlide(); // Reiniciar auto-slide
      });
    });
    
    // Pausar auto-slide en hover
    const hero = document.querySelector('section');
    hero?.addEventListener('mouseenter', stopAutoSlide);
    hero?.addEventListener('mouseleave', startAutoSlide);
    
    // Controles de teclado
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        stopAutoSlide();
        startAutoSlide();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        stopAutoSlide();
        startAutoSlide();
      }
    });
    
    // Inicializar slider
    console.log(`Slider iniciado con ${slides.length} imágenes`);
    
    // Asegurar que el primer slide esté visible
    if (slides.length > 0) {
      slides[0].classList.add('opacity-100');
      slides[0].classList.remove('opacity-0');
      
      // Actualizar indicador solo si existe
      if (indicatorButtons.length > 0 && indicatorButtons[0]) {
        indicatorButtons[0].classList.add('bg-white');
        indicatorButtons[0].classList.remove('bg-transparent');
      }
    }
    
    // Iniciar auto-slide
    startAutoSlide();
    
    // Precargar imágenes
    slides.forEach((slide, index) => {
      if (index > 0) {
        const img = slide.querySelector('img') as HTMLImageElement;
        if (img && img.loading === 'lazy') {
          img.loading = 'eager';
        }
      }
    });
    
    // Animar elementos de entrada
    setTimeout(() => {
      const animatedElements = document.querySelectorAll('.animate-fade-in-up');
      animatedElements.forEach((element) => {
        element.classList.remove('opacity-0', 'translate-y-8');
        element.classList.add('opacity-100', 'translate-y-0');
      });
    }, 500);
  });
</script>

